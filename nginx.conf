
# This assumes that `https://github.com/inetknght/systemd.software` was cloned
# to /srv/systemd.software.
# Nginx root will be /srv/systemd.software/www
#
# A python script runs the regex captures and redirects. It can be installed
# via a systemd service unit file. Nginx should proxy requests to it.
#
# This file should be installed to /etc/nginx/default.d/
# then you can tell nginx to load the configuration via
# `nginx -t && nginx -s reload`

upstream redirector {
    #
    # Remember to `semanage port -a -t http_port_t -p tcp 63001`
    # https://serverfault.com/a/563893/245340
    #
    # Then also `setsebool -P httpd_can_network_relay 1`
    # https://security.stackexchange.com/a/152387/47800
    server 127.0.0.1:63001;

    #
    # A unix socket is better than a TCP socket on localhost because
    # they're faster (don't need the overhead of TCP) and more information
    # available (like uid/pid of the connection)
    #
    # You'll need to `setsebool -P httpd_execmem 1`
    #
    # Then make sure nginx and your user are in the same group.
    # server unix:/srv/systemd.software/reverse-proxy.socket;
}

server {
  listen       80;
  listen       [::]:80;
  server_name  systemd.software
               www.systemd.software;

  include conf.d/error-pages.conf;
  include conf.d/gzip.conf;
  include conf.d/url-filter*.conf;

  location / {
    return 301 https://systemd.software$uri$is_args$args;
  }
}

server {
  ssl_certificate      /etc/letsencrypt/live/systemd.software/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/systemd.software/privkey.pem;
  ssl_session_tickets  off;

  listen       443 ssl http2;
  listen       [::]:443 ssl http2;
  server_name  systemd.software;

  include      conf.d/error-pages.conf;
  include      conf.d/url-filter*.conf;

  root         /srv/systemd.software/www;
  location ~/\.git {
    return 404;
  }
  location = /index.html {
  }
  location /examples {
    # Static content. No proxy needed.
  }
  location / {
    try_files $uri @redirector;
  }
  location @redirector {
    proxy_headers_hash_bucket_size 128;
    proxy_http_version 1.1; # Tornado does not support HTTP/2
    proxy_pass_request_headers on;
    proxy_pass_request_body off;
    proxy_read_timeout 5s;
    proxy_send_timeout 5s;
    proxy_cache_valid any 1m; # 1 minute
    proxy_cache_use_stale error timeout updating;
    proxy_pass http://redirector;
  }
}
